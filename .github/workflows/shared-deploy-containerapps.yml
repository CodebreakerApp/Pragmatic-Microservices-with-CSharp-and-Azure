name: Shared workflow to deploy to Azure Container Apps

on:
  workflow_call:
    inputs:
      container-repository:
        description: 'The name of the Docker image'
        required: true
        type: string       
      container-appname:
        description: 'The name of the container app'
        required: true
        type: string
      image-tag:
        description: 'The tag to use for the Docker image'
        required: true
        type: string
      resource-group:
        description: 'The name of the resource group'
        required: true
        type: string
      location:
        description: 'The location of the resource group'
        required: true
        type: string
      environment:
        description: 'The environment to use'
        required: false
        type: string
        default: 'dev'
    secrets:
      REGISTRY_USERNAME:
        description: 'The username of the ACR'
        required: true
      REGISTRY_PASSWORD:
        description: 'The password of the ACR'
        required: true
      AZURE_CREDENTIALS:
        description: 'The credentials to use for Azure'
        required: true
      
jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout to the branch
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }} 

      - name: Build and push container image to registry
        uses: azure/container-apps-deploy-action@v2
        with:
          imageToDeploy:  ${{ inputs.registry-login-server }}/${{ inputs.container-repository }}:${{ inputs.image-tag }}
          registryUrl: ${{ vars.REGISTRY_LOGIN_SERVER }} 
          registryUsername: ${{ secrets.REGISTRY_USERNAME }}
          registryPassword: ${{ secrets.REGISTRY_PASSWORD }}
          containerAppName: ${{ inputs.container-appname }}
          containerAppEnvironment: ${{ vars.CONTAINERAPPS_ENVIRONMENT }}
          resourceGroup: ${{ inputs.resource-group }}
          location: ${{ inputs.location }}
          targetPort: 8080
          ingress: external
